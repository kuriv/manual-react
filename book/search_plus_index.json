{"./":{"url":"./","title":"React","keywords":"","body":"React React 是一个用于构建用户界面的 JavaScript 框架。 "},"docs/安装与使用.html":{"url":"docs/安装与使用.html","title":"安装与使用","keywords":"","body":"安装与使用 首先，准备好一个容器。 Hello React 依次引入 React 所需的核心库文件，然后，创建一个简单的虚拟 DOM 并渲染到刚才的容器中。 const App = Hello React; ReactDOM.render(App, document.getElementById('app')); 不推荐使用下面的方式创建和渲染虚拟 DOM 。 const App = React.createElement('h1', {}, 'Hello React'); ReactDOM.render(App, document.getElementById('app')); 现在，即可打开浏览器查看效果。 "},"docs/JSX 语法规则.html":{"url":"docs/JSX 语法规则.html","title":"JSX 语法规则","keywords":"","body":"JSX 语法规则 注意，定义虚拟 DOM 的代码不能使用引号包起来，否则，以下代码将会作为字符串渲染输出。 const App = 'Hello React'; ReactDOM.render(App, document.getElementById('app')); 虚拟 DOM 必须只有一个根标签，否则，以下代码将会报错。 const App = ( Hello React ); ReactDOM.render(App, document.getElementById('app')); 如果虚拟 DOM 中有自闭合标签，则必须闭合。 const App = ; ReactDOM.render(App, document.getElementById('app')); 如果在虚拟 DOM 中使用大写字母开头的标签，则 React 默认会将其作为组件渲染输出。如果使用小写字母开头的标签，则 React 默认会将其作为 HTML 同名标签渲染输出，当 HTML 标签中不存在同名标签时则会报错。 const App = Hello React; ReactDOM.render(App, document.getElementById('app')); 如果要在虚拟 DOM 中混入 Javascript 表达式，则需要使用大括号。 let foo = 'bar'; const App = Hello React; ReactDOM.render(App, document.getElementById('app')); 如果需要指定类名，则不能使用 class 关键字，而是使用 className 关键字。 let foo = 'bar'; const App = Hello React; ReactDOM.render(App, document.getElementById('app')); 如果要在虚拟 DOM 中使用内联样式，则需要使用双大括号，且样式属性名遵循小驼峰命名规则。 const App = Hello React; ReactDOM.render(App, document.getElementById('app')); "},"docs/开发者工具.html":{"url":"docs/开发者工具.html","title":"开发者工具","keywords":"","body":"开发者工具 得益于 Chrome 浏览器强大的调试能力， console.log 可谓是前端开发中解决未知问题最直接的办法，而在 React 项目中有更好的调试方案，即 React Developer Tools 。在 Web 端的 React 项目里， React Developer Tools 是作为浏览器插件引入进来的，可以在 Chrome 应用商店中进行安装。 安装完毕后，如果插件检测到当前 Web 页面是 React 项目，则工具小图标会发生变化。 图标 含义 当前 Web 页面中没有检测到 React 依赖 当前 Web 页面正处于开发模式 当前 Web 页面正处于生产模式 当前 Web 页面依赖的 React 版本较老 React Developer Tools 调试入口在浏览器开发者工具中，分别是 Components 和 Profiler 。 "}}